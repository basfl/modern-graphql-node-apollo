type Query {
	users(q: String): [User!]!  
	me: User!
	post(id: ID!): Post!
	posts(q: String): [Post!]!
	myPosts(query: String): [Post!]!
	comments: [Comment]!
}
type Mutation {
	createUser(data: createUserInput!): AuthPayload!
	login(data: loginUserInput) : AuthPayload!
	deleteUser: User!
	updateUser(data: updateUserInput!): User!
	createPost(post: createPostInput!): Post!
	deletePost(id: ID!): Post!
	updatePost(id: ID!, data: updatePostInput): Post!
	createComment(comment: createCommentInput!): Comment!
	deleteComment(id: ID!): Comment!
	updateComment(id: ID!, data: updateCommentInput): Comment!
}

type Subscription {
	count: Int!
	comment(postId: ID!): CommentSubscriptionPayload!
	post(postId: ID!): PostSubscriptionPayload!
	myPost: PostSubscriptionPayload!
}

type AuthPayload {
	token: String!
	user: User!
}

input createUserInput {
	name: String!
	email: String!
	password: String!

}

input loginUserInput {

	email: String!
	password: String!
}

input updateUserInput {
	name: String
	email: String

}

input createPostInput {
	title: String!
	body: String!
	published: Boolean!

}

input updatePostInput {
	title: String
	body: String
	published: Boolean

}

input createCommentInput {
	text: String!
	post: ID!

}

input updateCommentInput {
	text: String!
}


type User {
	id: ID!
	name: String!
	email: String
	password: String!
	posts: [Post!]!
	comments: [Comment!]!
}
type Post {
	id: ID!
	title: String!
	body: String!
	published: Boolean!
	author: User!
	comments: [Comment!]!
}

type Comment {
	id: ID!
	text: String!
	author: User!
	post: Post!
}

enum  MutationType {
	CREATED
	UPDATED
	DELETED
}
type PostSubscriptionPayload {
	mutation: MutationType!
	node: Post
}

type CommentSubscriptionPayload {
	mutation: MutationType!
	node: Comment
}